Full Devops pipeline : 
the task here was to automate the deployment process of an app.
At the end, we had to be able to push the code from git locally and watch the change goes all the way to the deployemt without any manual effort.

TO Do:
On Github
- Set up a new repositry in github

On Gitbash 
- Create in our system the same repository that we create in remote repository; then initialize and 
  put the code from the developer server and make changes to the repo and push it back to github
  
On Jenkins Server 
- Install jenkins; Maven; Git ; Docker and set up Java path, Maven path.    

On Ansible Server
- Install ansible         
- Configure jenkins to login to ansible using SSH and run playbook (part1= create a user and passwd)     
- configure  ansible server to access k8s server for deployment                
- set up Ansible_deployment_file for playbook
        
On Kubernetes Clusters
- set up k8s cluster on AWS using "kops"
- Set up the password root            
- Create and Configure the deployment file for artifact, pods and the service file  for loadbalancer            

On Jenkins Job                   
- Set up jenkins to integrate git, maven, docker, Junit; 
- Configure jenkins to login to ansible using SSH and run playbook (part2= in manage credentials and configure system))                                                 
- Set up 2 jobs: build_code which triggers deploy_code




************************************************************ SETUP ***********************************************************************

************************************************************ Github ***********************************************************************
- Set up a new repositry in github
            -> new repo -> repo1

*********************************************************** Gitbash *********************************************************************** 
- Create in our system the same repository that we create in remote repository; then initialize and 
 put the code from the developer server and make changes to the repo and push it back to github
                            -> mkdir repo1 -> cd repo1
                            -> echo "# repo1" >> README.md  
                            -> git init
                            -> git add.
                            -> git remote add origin URL_repos1
                            -> git remote -v
                            -> git commit -m "readme"
                            -> scp -r Dev_username@Dev_hostname(IP):Dev_file .
                            -> ls ( Dockerfile   pom.xml   README.md   server/   webapp/   )
                            -> vim webapp/pom.xml (to modify artifact name)
                            -> vim webapp/src/main/webapp/index.jsp  ( to modify content)
                            -> vim Dockerfile ( to modify war file name in webapp/target/name.war)
                            -> git add.
                            -> git commit -m "code"
                            -> git push origin main
                            
**********************************************************Jenkins_Server*********************************************************************                           

- Install jenkins; Maven; Git ; Docker and set up Java path, Maven path.
            

******************************************************************* Ansible_server *******************************************************************
- Install ansible
          -> cd /etc/ansible
- Configure jenkins to login to ansible using SSH and run playbook (part1)
          -> useradd user1 and passwd user1
          -> vim /etc/ssh/sshd_config (PasswordAuthentication yes) -> if AWS
          -> service sshd restart
          -> su user1
          -> ansible -i /etc/ansible/hosts k8S -m ping
- Configure  ansible server to access k8s server for deployment         
          -> vim hosts ([k8s] ansible_host="IP_k8s" ansible_ssh_user=root ansible_ssh_pass=*******)
- Set up Ansible_deployment_file for playbook
          -> vim k8s.yml ( command: kubectl create -f deploy.yml; kubectl create-f service.yml )

***************************************************************************** K8S_Clusters *****************************************************************

- set up k8s cluster on AWS using "kops"
              -> create an EC2 instance and install AWSCLI, kubectl, kops
              -> create an IAM user/role with route53, EC2, IAM and S3 full access
              -> attach IAM role to EC2 instance
              -> create a route53 private hosted zone
              -> create an S3 bucket and Expose environment variable
              -> create SSH keys before creating cluster
              -> create k8s cluster and validate your cluster (1 master and 2 nodes created)
- Set up the password root 
              -> passwd root
              -> vim /etc/ssh/sshd_config (PasswordAuthentication yes | PermitRootLogin yes) -> if AWS
- Create and Configure the deployment file for artifact, pods and the service file  for loadbalancer              
                    -> vim deploy.yml (give name_app, pods_number, artifact created with no tag for pulling each time the latest)
                    -> vim service.yml (give name_service, name_app) => put a LB in front of the pods. ( go to the browser; IP_master:31200/name.war )
 
 
 **************************************************************************************** Jenkins_Job ***************************************************         
- Set up jenkins to integrate git, maven, docker, Junit;            
            * In manage plugins; install plugins 
                        -> Git 
                        -> maven invoker and maven integration
                        -> CloudBees Docker Build and Publish
                        -> warning next generation (junit, Sonarqube)
                        -> SSH 

            * In global tool configuration; set up path of: git, maven and java 
  
- Configure jenkins to login to ansible using SSH and run playbook (part2)                                         
        -> in manage credentials -> kind: username (user1) with password => jenkins uses the user1 credential to login to ansible
        -> configure system -> SSH sites
        
 -  set up 2 jobs: build_code which triggers deploy_code
        -> configure job_code: maven job -> pull code (git); build(maven) ; test(Junit) ; deploy to a registry (Docker Build and Publish)
                                         
        -> Configure job_deploy: freestyle job-> Build Triggers (build after job_code) 
                                              -> Build (Execute script on remote host using ssh; command: ansible-playbook /etc/ansible/k8s.yml)
                    

    
    
